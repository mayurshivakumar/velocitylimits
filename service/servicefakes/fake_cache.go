// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"sync"

	"velocitylimits/models"
	"velocitylimits/service"
)

type FakeCache struct {
	AddAccountToStoreStub        func(*models.Account) *models.Account
	addAccountToStoreMutex       sync.RWMutex
	addAccountToStoreArgsForCall []struct {
		arg1 *models.Account
	}
	addAccountToStoreReturns struct {
		result1 *models.Account
	}
	addAccountToStoreReturnsOnCall map[int]struct {
		result1 *models.Account
	}
	AddTransactionStub        func(string, string)
	addTransactionMutex       sync.RWMutex
	addTransactionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	GetAccountStub        func(string) *models.Account
	getAccountMutex       sync.RWMutex
	getAccountArgsForCall []struct {
		arg1 string
	}
	getAccountReturns struct {
		result1 *models.Account
	}
	getAccountReturnsOnCall map[int]struct {
		result1 *models.Account
	}
	IsDuplicateTransactionStub        func(string, string) bool
	isDuplicateTransactionMutex       sync.RWMutex
	isDuplicateTransactionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	isDuplicateTransactionReturns struct {
		result1 bool
	}
	isDuplicateTransactionReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCache) AddAccount(arg1 *models.Account) *models.Account {
	fake.addAccountToStoreMutex.Lock()
	ret, specificReturn := fake.addAccountToStoreReturnsOnCall[len(fake.addAccountToStoreArgsForCall)]
	fake.addAccountToStoreArgsForCall = append(fake.addAccountToStoreArgsForCall, struct {
		arg1 *models.Account
	}{arg1})
	fake.recordInvocation("AddAccount", []interface{}{arg1})
	fake.addAccountToStoreMutex.Unlock()
	if fake.AddAccountToStoreStub != nil {
		return fake.AddAccountToStoreStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addAccountToStoreReturns
	return fakeReturns.result1
}

func (fake *FakeCache) AddAccountToStoreCallCount() int {
	fake.addAccountToStoreMutex.RLock()
	defer fake.addAccountToStoreMutex.RUnlock()
	return len(fake.addAccountToStoreArgsForCall)
}

func (fake *FakeCache) AddAccountToStoreCalls(stub func(*models.Account) *models.Account) {
	fake.addAccountToStoreMutex.Lock()
	defer fake.addAccountToStoreMutex.Unlock()
	fake.AddAccountToStoreStub = stub
}

func (fake *FakeCache) AddAccountToStoreArgsForCall(i int) *models.Account {
	fake.addAccountToStoreMutex.RLock()
	defer fake.addAccountToStoreMutex.RUnlock()
	argsForCall := fake.addAccountToStoreArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCache) AddAccountToStoreReturns(result1 *models.Account) {
	fake.addAccountToStoreMutex.Lock()
	defer fake.addAccountToStoreMutex.Unlock()
	fake.AddAccountToStoreStub = nil
	fake.addAccountToStoreReturns = struct {
		result1 *models.Account
	}{result1}
}

func (fake *FakeCache) AddAccountToStoreReturnsOnCall(i int, result1 *models.Account) {
	fake.addAccountToStoreMutex.Lock()
	defer fake.addAccountToStoreMutex.Unlock()
	fake.AddAccountToStoreStub = nil
	if fake.addAccountToStoreReturnsOnCall == nil {
		fake.addAccountToStoreReturnsOnCall = make(map[int]struct {
			result1 *models.Account
		})
	}
	fake.addAccountToStoreReturnsOnCall[i] = struct {
		result1 *models.Account
	}{result1}
}

func (fake *FakeCache) AddTransaction(arg1 string, arg2 string) {
	fake.addTransactionMutex.Lock()
	fake.addTransactionArgsForCall = append(fake.addTransactionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AddTransaction", []interface{}{arg1, arg2})
	fake.addTransactionMutex.Unlock()
	if fake.AddTransactionStub != nil {
		fake.AddTransactionStub(arg1, arg2)
	}
}

func (fake *FakeCache) AddTransactionCallCount() int {
	fake.addTransactionMutex.RLock()
	defer fake.addTransactionMutex.RUnlock()
	return len(fake.addTransactionArgsForCall)
}

func (fake *FakeCache) AddTransactionCalls(stub func(string, string)) {
	fake.addTransactionMutex.Lock()
	defer fake.addTransactionMutex.Unlock()
	fake.AddTransactionStub = stub
}

func (fake *FakeCache) AddTransactionArgsForCall(i int) (string, string) {
	fake.addTransactionMutex.RLock()
	defer fake.addTransactionMutex.RUnlock()
	argsForCall := fake.addTransactionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCache) GetAccount(arg1 string) *models.Account {
	fake.getAccountMutex.Lock()
	ret, specificReturn := fake.getAccountReturnsOnCall[len(fake.getAccountArgsForCall)]
	fake.getAccountArgsForCall = append(fake.getAccountArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAccount", []interface{}{arg1})
	fake.getAccountMutex.Unlock()
	if fake.GetAccountStub != nil {
		return fake.GetAccountStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getAccountReturns
	return fakeReturns.result1
}

func (fake *FakeCache) GetAccountCallCount() int {
	fake.getAccountMutex.RLock()
	defer fake.getAccountMutex.RUnlock()
	return len(fake.getAccountArgsForCall)
}

func (fake *FakeCache) GetAccountCalls(stub func(string) *models.Account) {
	fake.getAccountMutex.Lock()
	defer fake.getAccountMutex.Unlock()
	fake.GetAccountStub = stub
}

func (fake *FakeCache) GetAccountArgsForCall(i int) string {
	fake.getAccountMutex.RLock()
	defer fake.getAccountMutex.RUnlock()
	argsForCall := fake.getAccountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCache) GetAccountReturns(result1 *models.Account) {
	fake.getAccountMutex.Lock()
	defer fake.getAccountMutex.Unlock()
	fake.GetAccountStub = nil
	fake.getAccountReturns = struct {
		result1 *models.Account
	}{result1}
}

func (fake *FakeCache) GetAccountReturnsOnCall(i int, result1 *models.Account) {
	fake.getAccountMutex.Lock()
	defer fake.getAccountMutex.Unlock()
	fake.GetAccountStub = nil
	if fake.getAccountReturnsOnCall == nil {
		fake.getAccountReturnsOnCall = make(map[int]struct {
			result1 *models.Account
		})
	}
	fake.getAccountReturnsOnCall[i] = struct {
		result1 *models.Account
	}{result1}
}

func (fake *FakeCache) IsDuplicateTransaction(arg1 string, arg2 string) bool {
	fake.isDuplicateTransactionMutex.Lock()
	ret, specificReturn := fake.isDuplicateTransactionReturnsOnCall[len(fake.isDuplicateTransactionArgsForCall)]
	fake.isDuplicateTransactionArgsForCall = append(fake.isDuplicateTransactionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("IsDuplicateTransaction", []interface{}{arg1, arg2})
	fake.isDuplicateTransactionMutex.Unlock()
	if fake.IsDuplicateTransactionStub != nil {
		return fake.IsDuplicateTransactionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.isDuplicateTransactionReturns
	return fakeReturns.result1
}

func (fake *FakeCache) IsDuplicateTransactionCallCount() int {
	fake.isDuplicateTransactionMutex.RLock()
	defer fake.isDuplicateTransactionMutex.RUnlock()
	return len(fake.isDuplicateTransactionArgsForCall)
}

func (fake *FakeCache) IsDuplicateTransactionCalls(stub func(string, string) bool) {
	fake.isDuplicateTransactionMutex.Lock()
	defer fake.isDuplicateTransactionMutex.Unlock()
	fake.IsDuplicateTransactionStub = stub
}

func (fake *FakeCache) IsDuplicateTransactionArgsForCall(i int) (string, string) {
	fake.isDuplicateTransactionMutex.RLock()
	defer fake.isDuplicateTransactionMutex.RUnlock()
	argsForCall := fake.isDuplicateTransactionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCache) IsDuplicateTransactionReturns(result1 bool) {
	fake.isDuplicateTransactionMutex.Lock()
	defer fake.isDuplicateTransactionMutex.Unlock()
	fake.IsDuplicateTransactionStub = nil
	fake.isDuplicateTransactionReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCache) IsDuplicateTransactionReturnsOnCall(i int, result1 bool) {
	fake.isDuplicateTransactionMutex.Lock()
	defer fake.isDuplicateTransactionMutex.Unlock()
	fake.IsDuplicateTransactionStub = nil
	if fake.isDuplicateTransactionReturnsOnCall == nil {
		fake.isDuplicateTransactionReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isDuplicateTransactionReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCache) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addAccountToStoreMutex.RLock()
	defer fake.addAccountToStoreMutex.RUnlock()
	fake.addTransactionMutex.RLock()
	defer fake.addTransactionMutex.RUnlock()
	fake.getAccountMutex.RLock()
	defer fake.getAccountMutex.RUnlock()
	fake.isDuplicateTransactionMutex.RLock()
	defer fake.isDuplicateTransactionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCache) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Cache = new(FakeCache)
